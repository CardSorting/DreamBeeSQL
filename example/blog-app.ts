/**
 * NOORM Blog Application Example
 * 
 * This example demonstrates a complete blog application using NOORM.
 * It shows how to work with users, posts, and comments with automatic
 * schema discovery and type generation.
 */

import { NOORM } from 'noorm'

// Database configuration
const db = new NOORM({
  dialect: 'postgresql',
  connection: {
    host: process.env.DB_HOST || 'localhost',
    port: parseInt(process.env.DB_PORT || '5432'),
    database: process.env.DB_NAME || 'blog_app',
    username: process.env.DB_USER || 'postgres',
    password: process.env.DB_PASSWORD || 'password'
  },
  introspection: {
    includeViews: false,
    excludeTables: ['migrations'],
    customTypeMappings: {
      'jsonb': 'Record<string, any>'
    }
  },
  cache: {
    ttl: 300000, // 5 minutes
    maxSize: 1000
  },
  logging: {
    level: 'info',
    enabled: true
  }
})

// Auto-generated types (these would be generated by NOORM)
interface User {
  id: string
  email: string
  firstName?: string
  lastName?: string
  createdAt?: Date
  updatedAt?: Date
  posts?: Post[]
  comments?: Comment[]
}

interface Post {
  id: string
  title: string
  content: string
  userId: string
  published: boolean
  createdAt?: Date
  updatedAt?: Date
  user?: User
  comments?: Comment[]
}

interface Comment {
  id: string
  content: string
  postId: string
  userId: string
  createdAt?: Date
  updatedAt?: Date
  post?: Post
  user?: User
}

async function main() {
  try {
    // Initialize NOORM (discovers schema automatically)
    console.log('üöÄ Initializing NOORM...')
    await db.initialize()
    console.log('‚úÖ NOORM initialized successfully!')

    // Get auto-generated repositories
    const userRepo = db.getRepository('users')
    const postRepo = db.getRepository('posts')
    const commentRepo = db.getRepository('comments')

    console.log('\nüìù Creating a blog post...')

    // Create a user
    const user = await userRepo.create({
      email: 'john@example.com',
      firstName: 'John',
      lastName: 'Doe'
    })
    console.log(`‚úÖ Created user: ${user.firstName} ${user.lastName} (${user.email})`)

    // Create a blog post
    const post = await postRepo.create({
      title: 'Getting Started with NOORM',
      content: 'NOORM is a zero-configuration pseudo-ORM that automatically discovers your database schema and generates everything you need. No manual entity definitions, no complex setup - just pure magic!',
      userId: user.id,
      published: true
    })
    console.log(`‚úÖ Created post: "${post.title}"`)

    // Add a comment
    const comment = await commentRepo.create({
      content: 'Great post! NOORM looks amazing!',
      postId: post.id,
      userId: user.id
    })
    console.log(`‚úÖ Added comment: "${comment.content}"`)

    console.log('\nüîç Loading relationships...')

    // Load post with all relationships
    const postWithRelations = await postRepo.findWithRelations(post.id, ['user', 'comments.user'])
    console.log(`üìñ Post: "${postWithRelations.title}"`)
    console.log(`üë§ Author: ${postWithRelations.user?.firstName} ${postWithRelations.user?.lastName}`)
    console.log(`üí¨ Comments: ${postWithRelations.comments?.length || 0}`)

    if (postWithRelations.comments && postWithRelations.comments.length > 0) {
      postWithRelations.comments.forEach((comment, index) => {
        console.log(`   ${index + 1}. "${comment.content}" - ${comment.user?.firstName}`)
      })
    }

    console.log('\nüîç Finding users by email...')

    // Find user by email (custom repository method)
    const foundUser = await userRepo.findByEmail('john@example.com')
    if (foundUser) {
      console.log(`‚úÖ Found user: ${foundUser.firstName} ${foundUser.lastName}`)
    }

    console.log('\nüìä Getting all posts...')

    // Get all published posts
    const allPosts = await postRepo.findAll()
    console.log(`üìù Total posts: ${allPosts.length}`)
    allPosts.forEach((post, index) => {
      console.log(`   ${index + 1}. "${post.title}" (${post.published ? 'Published' : 'Draft'})`)
    })

    console.log('\nüîç Complex query example...')

    // Complex query using Kysely directly
    const recentPosts = await db
      .selectFrom('posts')
      .innerJoin('users', 'users.id', 'posts.user_id')
      .where('posts.published', '=', true)
      .select([
        'posts.id',
        'posts.title',
        'posts.content',
        'posts.created_at',
        'users.first_name',
        'users.last_name'
      ])
      .orderBy('posts.created_at', 'desc')
      .limit(5)
      .execute()

    console.log('üì∞ Recent published posts:')
    recentPosts.forEach((post, index) => {
      console.log(`   ${index + 1}. "${post.title}" by ${post.first_name} ${post.last_name}`)
    })

    console.log('\nüéâ Blog application example completed successfully!')

  } catch (error) {
    console.error('‚ùå Error:', error)
    process.exit(1)
  } finally {
    // Close database connection
    await db.close()
    console.log('üîå Database connection closed')
  }
}

// Run the example
if (require.main === module) {
  main().catch(console.error)
}

export { main }
