/**
 * NOORM E-commerce Application Example
 * 
 * This example demonstrates an e-commerce application using NOORM.
 * It shows how to work with products, orders, customers, and order items
 * with automatic schema discovery and type generation.
 */

import { NOORM } from 'noorm'

// Database configuration
const db = new NOORM({
  dialect: 'sqlite',
  connection: {
    database: process.env.DB_NAME || './ecommerce_app.sqlite'
  },
  introspection: {
    includeViews: false,
    excludeTables: ['migrations'],
    customTypeMappings: {
      'jsonb': 'Record<string, any>',
      'decimal': 'number'
    }
  },
  cache: {
    ttl: 300000, // 5 minutes
    maxSize: 1000
  },
  logging: {
    level: 'info',
    enabled: true
  }
})

// Auto-generated types (these would be generated by NOORM)
interface Customer {
  id: string
  email: string
  firstName?: string
  lastName?: string
  phone?: string
  address?: string
  createdAt?: Date
  updatedAt?: Date
  orders?: Order[]
}

interface Product {
  id: string
  name: string
  description?: string
  price: number
  stock: number
  category?: string
  active: boolean
  createdAt?: Date
  updatedAt?: Date
  orderItems?: OrderItem[]
}

interface Order {
  id: string
  customerId: string
  total: number
  status: 'pending' | 'processing' | 'shipped' | 'delivered' | 'cancelled'
  shippingAddress?: string
  createdAt?: Date
  updatedAt?: Date
  customer?: Customer
  orderItems?: OrderItem[]
}

interface OrderItem {
  id: string
  orderId: string
  productId: string
  quantity: number
  price: number
  createdAt?: Date
  updatedAt?: Date
  order?: Order
  product?: Product
}

async function main() {
  try {
    // Initialize NOORM (discovers schema automatically)
    console.log('üöÄ Initializing NOORM...')
    await db.initialize()
    console.log('‚úÖ NOORM initialized successfully!')

    // Get auto-generated repositories
    const customerRepo = db.getRepository('customers')
    const productRepo = db.getRepository('products')
    const orderRepo = db.getRepository('orders')
    const orderItemRepo = db.getRepository('order_items')

    console.log('\nüõçÔ∏è Setting up e-commerce store...')

    // Create products
    const products = await Promise.all([
      productRepo.create({
        name: 'Wireless Headphones',
        description: 'High-quality wireless headphones with noise cancellation',
        price: 199.99,
        stock: 50,
        category: 'Electronics',
        active: true
      }),
      productRepo.create({
        name: 'Smart Watch',
        description: 'Advanced smart watch with health monitoring',
        price: 299.99,
        stock: 30,
        category: 'Electronics',
        active: true
      }),
      productRepo.create({
        name: 'Coffee Maker',
        description: 'Automatic coffee maker with programmable settings',
        price: 149.99,
        stock: 25,
        category: 'Appliances',
        active: true
      })
    ])

    console.log(`‚úÖ Created ${products.length} products:`)
    products.forEach((product, index) => {
      console.log(`   ${index + 1}. ${product.name} - $${product.price}`)
    })

    // Create a customer
    const customer = await customerRepo.create({
      email: 'alice@example.com',
      firstName: 'Alice',
      lastName: 'Johnson',
      phone: '+1-555-0123',
      address: '123 Main St, Anytown, USA'
    })
    console.log(`‚úÖ Created customer: ${customer.firstName} ${customer.lastName} (${customer.email})`)

    console.log('\nüõí Processing an order...')

    // Create an order
    const order = await orderRepo.create({
      customerId: customer.id,
      total: 0, // Will be calculated
      status: 'pending',
      shippingAddress: customer.address
    })
    console.log(`‚úÖ Created order: #${order.id}`)

    // Add items to the order
    const orderItems = await Promise.all([
      orderItemRepo.create({
        orderId: order.id,
        productId: products[0].id, // Wireless Headphones
        quantity: 1,
        price: products[0].price
      }),
      orderItemRepo.create({
        orderId: order.id,
        productId: products[2].id, // Coffee Maker
        quantity: 2,
        price: products[2].price
      })
    ])

    console.log(`‚úÖ Added ${orderItems.length} items to order`)

    // Calculate total
    const total = orderItems.reduce((sum, item) => sum + (item.price * item.quantity), 0)
    
    // Update order with total
    order.total = total
    order.status = 'processing'
    const updatedOrder = await orderRepo.update(order)
    console.log(`‚úÖ Updated order total: $${updatedOrder.total}`)

    console.log('\nüîç Loading order with relationships...')

    // Load order with all relationships
    const orderWithRelations = await orderRepo.findWithRelations(order.id, ['customer', 'orderItems.product'])
    console.log(`üì¶ Order #${orderWithRelations.id}:`)
    console.log(`üë§ Customer: ${orderWithRelations.customer?.firstName} ${orderWithRelations.customer?.lastName}`)
    console.log(`üí∞ Total: $${orderWithRelations.total}`)
    console.log(`üìä Status: ${orderWithRelations.status}`)
    console.log(`üì¶ Items:`)

    if (orderWithRelations.orderItems) {
      orderWithRelations.orderItems.forEach((item, index) => {
        console.log(`   ${index + 1}. ${item.product?.name} x${item.quantity} - $${item.price} each`)
      })
    }

    console.log('\nüîç Finding products by category...')

    // Find products by category
    const electronics = await db
      .selectFrom('products')
      .where('category', '=', 'Electronics')
      .where('active', '=', true)
      .selectAll()
      .execute()

    console.log(`üì± Electronics products: ${electronics.length}`)
    electronics.forEach((product, index) => {
      console.log(`   ${index + 1}. ${product.name} - $${product.price} (Stock: ${product.stock})`)
    })

    console.log('\nüîç Finding customer orders...')

    // Find all orders for a customer
    const customerOrders = await db
      .selectFrom('orders')
      .where('customer_id', '=', customer.id)
      .selectAll()
      .execute()

    console.log(`üìã Orders for ${customer.firstName}: ${customerOrders.length}`)
    customerOrders.forEach((order, index) => {
      console.log(`   ${index + 1}. Order #${order.id} - $${order.total} (${order.status})`)
    })

    console.log('\nüìä Inventory management...')

    // Update product stock after order
    for (const item of orderItems) {
      const product = await productRepo.findById(item.productId)
      if (product) {
        product.stock -= item.quantity
        await productRepo.update(product)
        console.log(`üì¶ Updated stock for ${product.name}: ${product.stock} remaining`)
      }
    }

    console.log('\nüîç Complex query: Top selling products...')

    // Complex query to find top selling products
    const topProducts = await db
      .selectFrom('order_items')
      .innerJoin('products', 'products.id', 'order_items.product_id')
      .select([
        'products.id',
        'products.name',
        'products.price',
        db.fn.sum('order_items.quantity').as('total_sold'),
        db.fn.sum(db.fn.coalesce('order_items.price', 0)).as('total_revenue')
      ])
      .groupBy(['products.id', 'products.name', 'products.price'])
      .orderBy('total_sold', 'desc')
      .limit(5)
      .execute()

    console.log('üèÜ Top selling products:')
    topProducts.forEach((product, index) => {
      console.log(`   ${index + 1}. ${product.name} - ${product.total_sold} sold ($${product.total_revenue} revenue)`)
    })

    console.log('\nüéâ E-commerce application example completed successfully!')

  } catch (error) {
    console.error('‚ùå Error:', error)
    process.exit(1)
  } finally {
    // Close database connection
    await db.close()
    console.log('üîå Database connection closed')
  }
}

// Run the example
if (require.main === module) {
  main().catch(console.error)
}

export { main }
