/**
 * NOORM Task Management Application Example
 * 
 * This example demonstrates a task management application using NOORM.
 * It shows how to work with projects, tasks, teams, and assignments
 * with automatic schema discovery and type generation.
 */

import { NOORM } from 'noorm'

// Database configuration
const db = new NOORM({
  dialect: 'postgresql',
  connection: {
    host: process.env.DB_HOST || 'localhost',
    port: parseInt(process.env.DB_PORT || '5432'),
    database: process.env.DB_NAME || 'task_app',
    username: process.env.DB_USER || 'postgres',
    password: process.env.DB_PASSWORD || 'password'
  },
  introspection: {
    includeViews: false,
    excludeTables: ['migrations'],
    customTypeMappings: {
      'jsonb': 'Record<string, any>'
    }
  },
  cache: {
    ttl: 300000, // 5 minutes
    maxSize: 1000
  },
  logging: {
    level: 'info',
    enabled: true
  }
})

// Auto-generated types (these would be generated by NOORM)
interface Team {
  id: string
  name: string
  description?: string
  createdAt?: Date
  updatedAt?: Date
  members?: TeamMember[]
  projects?: Project[]
}

interface TeamMember {
  id: string
  teamId: string
  userId: string
  role: 'admin' | 'member' | 'viewer'
  joinedAt?: Date
  team?: Team
  user?: User
}

interface User {
  id: string
  email: string
  firstName?: string
  lastName?: string
  role: 'admin' | 'manager' | 'developer' | 'designer'
  active: boolean
  createdAt?: Date
  updatedAt?: Date
  teamMemberships?: TeamMember[]
  assignedTasks?: TaskAssignment[]
}

interface Project {
  id: string
  name: string
  description?: string
  teamId: string
  status: 'planning' | 'active' | 'on_hold' | 'completed' | 'cancelled'
  startDate?: Date
  endDate?: Date
  createdAt?: Date
  updatedAt?: Date
  team?: Team
  tasks?: Task[]
}

interface Task {
  id: string
  title: string
  description?: string
  projectId: string
  status: 'todo' | 'in_progress' | 'review' | 'done'
  priority: 'low' | 'medium' | 'high' | 'urgent'
  estimatedHours?: number
  actualHours?: number
  dueDate?: Date
  createdAt?: Date
  updatedAt?: Date
  project?: Project
  assignments?: TaskAssignment[]
}

interface TaskAssignment {
  id: string
  taskId: string
  userId: string
  assignedAt?: Date
  task?: Task
  user?: User
}

async function main() {
  try {
    // Initialize NOORM (discovers schema automatically)
    console.log('🚀 Initializing NOORM...')
    await db.initialize()
    console.log('✅ NOORM initialized successfully!')

    // Get auto-generated repositories
    const teamRepo = db.getRepository('teams')
    const userRepo = db.getRepository('users')
    const teamMemberRepo = db.getRepository('team_members')
    const projectRepo = db.getRepository('projects')
    const taskRepo = db.getRepository('tasks')
    const taskAssignmentRepo = db.getRepository('task_assignments')

    console.log('\n👥 Setting up task management system...')

    // Create a team
    const team = await teamRepo.create({
      name: 'Development Team',
      description: 'Main development team for the project'
    })
    console.log(`✅ Created team: ${team.name}`)

    // Create users
    const users = await Promise.all([
      userRepo.create({
        email: 'alice@example.com',
        firstName: 'Alice',
        lastName: 'Johnson',
        role: 'manager',
        active: true
      }),
      userRepo.create({
        email: 'bob@example.com',
        firstName: 'Bob',
        lastName: 'Smith',
        role: 'developer',
        active: true
      }),
      userRepo.create({
        email: 'carol@example.com',
        firstName: 'Carol',
        lastName: 'Davis',
        role: 'designer',
        active: true
      })
    ])

    console.log(`✅ Created ${users.length} users:`)
    users.forEach((user, index) => {
      console.log(`   ${index + 1}. ${user.firstName} ${user.lastName} (${user.role})`)
    })

    // Add users to team
    const teamMembers = await Promise.all([
      teamMemberRepo.create({
        teamId: team.id,
        userId: users[0].id, // Alice - Manager
        role: 'admin'
      }),
      teamMemberRepo.create({
        teamId: team.id,
        userId: users[1].id, // Bob - Developer
        role: 'member'
      }),
      teamMemberRepo.create({
        teamId: team.id,
        userId: users[2].id, // Carol - Designer
        role: 'member'
      })
    ])

    console.log(`✅ Added ${teamMembers.length} members to team`)

    // Create a project
    const project = await projectRepo.create({
      name: 'Website Redesign',
      description: 'Complete redesign of the company website',
      teamId: team.id,
      status: 'active',
      startDate: new Date(),
      endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 days from now
    })
    console.log(`✅ Created project: ${project.name}`)

    console.log('\n📋 Creating tasks...')

    // Create tasks
    const tasks = await Promise.all([
      taskRepo.create({
        title: 'Design new homepage',
        description: 'Create wireframes and mockups for the new homepage',
        projectId: project.id,
        status: 'in_progress',
        priority: 'high',
        estimatedHours: 16,
        dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) // 7 days from now
      }),
      taskRepo.create({
        title: 'Implement responsive layout',
        description: 'Build responsive CSS for mobile and tablet devices',
        projectId: project.id,
        status: 'todo',
        priority: 'medium',
        estimatedHours: 24,
        dueDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000) // 14 days from now
      }),
      taskRepo.create({
        title: 'Add user authentication',
        description: 'Implement login and registration functionality',
        projectId: project.id,
        status: 'todo',
        priority: 'high',
        estimatedHours: 32,
        dueDate: new Date(Date.now() + 21 * 24 * 60 * 60 * 1000) // 21 days from now
      })
    ])

    console.log(`✅ Created ${tasks.length} tasks:`)
    tasks.forEach((task, index) => {
      console.log(`   ${index + 1}. ${task.title} (${task.status}, ${task.priority})`)
    })

    // Assign tasks to users
    const assignments = await Promise.all([
      taskAssignmentRepo.create({
        taskId: tasks[0].id, // Design new homepage
        userId: users[2].id  // Carol - Designer
      }),
      taskAssignmentRepo.create({
        taskId: tasks[1].id, // Implement responsive layout
        userId: users[1].id  // Bob - Developer
      }),
      taskAssignmentRepo.create({
        taskId: tasks[2].id, // Add user authentication
        userId: users[1].id  // Bob - Developer
      })
    ])

    console.log(`✅ Created ${assignments.length} task assignments`)

    console.log('\n🔍 Loading project with relationships...')

    // Load project with all relationships
    const projectWithRelations = await projectRepo.findWithRelations(project.id, ['team.members.user', 'tasks.assignments.user'])
    console.log(`📁 Project: ${projectWithRelations.name}`)
    console.log(`👥 Team: ${projectWithRelations.team?.name}`)
    console.log(`📊 Status: ${projectWithRelations.status}`)
    console.log(`📅 Due: ${projectWithRelations.endDate?.toLocaleDateString()}`)

    if (projectWithRelations.team?.members) {
      console.log(`👤 Team Members:`)
      projectWithRelations.team.members.forEach((member, index) => {
        console.log(`   ${index + 1}. ${member.user?.firstName} ${member.user?.lastName} (${member.role})`)
      })
    }

    if (projectWithRelations.tasks) {
      console.log(`📋 Tasks:`)
      projectWithRelations.tasks.forEach((task, index) => {
        console.log(`   ${index + 1}. ${task.title} (${task.status}, ${task.priority})`)
        if (task.assignments && task.assignments.length > 0) {
          task.assignments.forEach((assignment, assignIndex) => {
            console.log(`      👤 Assigned to: ${assignment.user?.firstName} ${assignment.user?.lastName}`)
          })
        }
      })
    }

    console.log('\n🔍 Finding tasks by status...')

    // Find tasks by status
    const inProgressTasks = await db
      .selectFrom('tasks')
      .where('status', '=', 'in_progress')
      .selectAll()
      .execute()

    console.log(`🔄 In Progress Tasks: ${inProgressTasks.length}`)
    inProgressTasks.forEach((task, index) => {
      console.log(`   ${index + 1}. ${task.title} (${task.priority})`)
    })

    console.log('\n🔍 Finding user assignments...')

    // Find all tasks assigned to a user
    const userTasks = await db
      .selectFrom('task_assignments')
      .innerJoin('tasks', 'tasks.id', 'task_assignments.task_id')
      .innerJoin('projects', 'projects.id', 'tasks.project_id')
      .where('task_assignments.user_id', '=', users[1].id) // Bob
      .select([
        'tasks.id',
        'tasks.title',
        'tasks.status',
        'tasks.priority',
        'tasks.due_date',
        'projects.name as project_name'
      ])
      .execute()

    console.log(`📋 Tasks assigned to ${users[1].firstName}:`)
    userTasks.forEach((task, index) => {
      console.log(`   ${index + 1}. ${task.title} (${task.status}, ${task.priority}) - ${task.project_name}`)
    })

    console.log('\n📊 Project progress...')

    // Calculate project progress
    const projectTasks = await db
      .selectFrom('tasks')
      .where('project_id', '=', project.id)
      .selectAll()
      .execute()

    const completedTasks = projectTasks.filter(task => task.status === 'done').length
    const totalTasks = projectTasks.length
    const progressPercentage = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0

    console.log(`📈 Project Progress: ${progressPercentage.toFixed(1)}% (${completedTasks}/${totalTasks} tasks completed)`)

    // Update task status
    tasks[0].status = 'review'
    tasks[0].actualHours = 18
    await taskRepo.update(tasks[0])
    console.log(`✅ Updated task: ${tasks[0].title} -> ${tasks[0].status}`)

    console.log('\n🔍 Complex query: Team workload...')

    // Complex query to show team workload
    const teamWorkload = await db
      .selectFrom('task_assignments')
      .innerJoin('tasks', 'tasks.id', 'task_assignments.task_id')
      .innerJoin('users', 'users.id', 'task_assignments.user_id')
      .innerJoin('projects', 'projects.id', 'tasks.project_id')
      .where('projects.team_id', '=', team.id)
      .select([
        'users.first_name',
        'users.last_name',
        'users.role',
        db.fn.count('task_assignments.id').as('task_count'),
        db.fn.sum('tasks.estimated_hours').as('total_estimated_hours')
      ])
      .groupBy(['users.id', 'users.first_name', 'users.last_name', 'users.role'])
      .execute()

    console.log('👥 Team Workload:')
    teamWorkload.forEach((member, index) => {
      console.log(`   ${index + 1}. ${member.first_name} ${member.last_name} (${member.role})`)
      console.log(`      📋 Tasks: ${member.task_count}`)
      console.log(`      ⏱️  Estimated Hours: ${member.total_estimated_hours || 0}`)
    })

    console.log('\n🎉 Task management application example completed successfully!')

  } catch (error) {
    console.error('❌ Error:', error)
    process.exit(1)
  } finally {
    // Close database connection
    await db.close()
    console.log('🔌 Database connection closed')
  }
}

// Run the example
if (require.main === module) {
  main().catch(console.error)
}

export { main }
